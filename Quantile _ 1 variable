##quantile regression - for the only 1 independent variable 
##import the packages 
%matplotlib inline
import numpy as np
import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
import matplotlib.pyplot as plt

##read the data -- could read whatever the data you want 
data = sm.datasets.engel.load_pandas().data

## least absolute deviation 
# The LAD model is a special case of quantile regression when q = 0.5 
mod = smf.quantreg('foodexp ~ income', data)
res = mod.fit(q=.5)
#print(res.summary())

#Other situations - a series of the quantile regression 
quantiles = np.arange(.05, .96, .1) #define the change of q
def fit_model(q):
    res = mod.fit(q=q)
    return [q, res.params['Intercept'], res.params['income']] + \
            res.conf_int().loc['income'].tolist()
models = [fit_model(x) for x in quantiles]
models = pd.DataFrame(models, columns=['q', 'a', 'b', 'lb', 'ub'])
ols = smf.ols('foodexp ~ income', data).fit()
ols_ci = ols.conf_int().loc['income'].tolist()
ols = dict(a = ols.params['Intercept'],
           b = ols.params['income'],
           lb = ols_ci[0],
           ub = ols_ci[1])
#print(models)
#print(ols)

##first plot 
# this plot compares the best fit lines for 10 quantile regression to the least square fit 
#1 food expenditure increases with income 
#2 the dispersion of food expenditure increases with income 
#3 the least squares estimates fit low income observations quite poorly 
x = np.arange(data.income.min(), data.income.max(), 50)
get_y = lambda a, b: a + b * x

fig, ax = plt.subplots(figsize=(8, 6))

for i in range(models.shape[0]):
    y = get_y(models.a[i], models.b[i])
    ax.plot(x, y, linestyle='dotted', color='grey')

y = get_y(ols['a'], ols['b'])

ax.plot(x, y, color='red', label='OLS')
ax.scatter(data.income, data.foodexp, alpha=.2)
ax.set_xlim((240, 3000))
ax.set_ylim((240, 2000))
legend = ax.legend()
ax.set_xlabel('Income', fontsize=16)
ax.set_ylabel('Food expenditure', fontsize=16);

##second hand plot
# the dotted line of the black - 0.95 confidence interval 
# the red of the ols - 0.95 confidence interval 

n = models.shape[0]
p1 = plt.plot(models.q, models.b, color='black', label='Quantile Reg.')
p2 = plt.plot(models.q, models.ub, linestyle='dotted', color='black')
p3 = plt.plot(models.q, models.lb, linestyle='dotted', color='black')
p4 = plt.plot(models.q, [ols['b']] * n, color='red', label='OLS')
p5 = plt.plot(models.q, [ols['lb']] * n, linestyle='dotted', color='red')
p6 = plt.plot(models.q, [ols['ub']] * n, linestyle='dotted', color='red')
plt.ylabel(r'$\beta_{income}$')
plt.xlabel('Quantiles of the conditional food expenditure distribution')
plt.legend()
plt.show()

## in most cases, the quantile regression point estimates lie outside the ols confidence interval 
# which suggests that the effect of income on food expensiture may not be constant across the distribution 
